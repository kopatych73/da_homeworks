{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "from math import sqrt\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Загружаем датасет с курсом акций Газпрома**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "gazp = pd.read_table('GAZP_210801_220806.txt',sep=',')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на данные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>&lt;TICKER&gt;</th>\n",
       "      <th>&lt;PER&gt;</th>\n",
       "      <th>&lt;DATE&gt;</th>\n",
       "      <th>&lt;TIME&gt;</th>\n",
       "      <th>&lt;OPEN&gt;</th>\n",
       "      <th>&lt;HIGH&gt;</th>\n",
       "      <th>&lt;LOW&gt;</th>\n",
       "      <th>&lt;CLOSE&gt;</th>\n",
       "      <th>&lt;VOL&gt;</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210802</td>\n",
       "      <td>0</td>\n",
       "      <td>287.88</td>\n",
       "      <td>289.48</td>\n",
       "      <td>285.21</td>\n",
       "      <td>286.75</td>\n",
       "      <td>38297270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210803</td>\n",
       "      <td>0</td>\n",
       "      <td>286.77</td>\n",
       "      <td>288.05</td>\n",
       "      <td>284.34</td>\n",
       "      <td>287.09</td>\n",
       "      <td>27065240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210804</td>\n",
       "      <td>0</td>\n",
       "      <td>287.89</td>\n",
       "      <td>288.80</td>\n",
       "      <td>286.00</td>\n",
       "      <td>287.94</td>\n",
       "      <td>23599750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210805</td>\n",
       "      <td>0</td>\n",
       "      <td>287.31</td>\n",
       "      <td>288.28</td>\n",
       "      <td>285.16</td>\n",
       "      <td>285.95</td>\n",
       "      <td>47254880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210806</td>\n",
       "      <td>0</td>\n",
       "      <td>285.26</td>\n",
       "      <td>285.72</td>\n",
       "      <td>277.87</td>\n",
       "      <td>282.27</td>\n",
       "      <td>90600850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  <TICKER> <PER>    <DATE>  <TIME>  <OPEN>  <HIGH>   <LOW>  <CLOSE>     <VOL>\n",
       "0     GAZP     D  20210802       0  287.88  289.48  285.21   286.75  38297270\n",
       "1     GAZP     D  20210803       0  286.77  288.05  284.34   287.09  27065240\n",
       "2     GAZP     D  20210804       0  287.89  288.80  286.00   287.94  23599750\n",
       "3     GAZP     D  20210805       0  287.31  288.28  285.16   285.95  47254880\n",
       "4     GAZP     D  20210806       0  285.26  285.72  277.87   282.27  90600850"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gazp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 238 entries, 0 to 237\n",
      "Data columns (total 9 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   <TICKER>  238 non-null    object \n",
      " 1   <PER>     238 non-null    object \n",
      " 2   <DATE>    238 non-null    int64  \n",
      " 3   <TIME>    238 non-null    int64  \n",
      " 4   <OPEN>    238 non-null    float64\n",
      " 5   <HIGH>    238 non-null    float64\n",
      " 6   <LOW>     238 non-null    float64\n",
      " 7   <CLOSE>   238 non-null    float64\n",
      " 8   <VOL>     238 non-null    int64  \n",
      "dtypes: float64(4), int64(3), object(2)\n",
      "memory usage: 16.9+ KB\n"
     ]
    }
   ],
   "source": [
    "gazp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропусков нет. \n",
    "\n",
    "Переименуем названия колонок для удобства"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TICKER</th>\n",
       "      <th>PER</th>\n",
       "      <th>DATE</th>\n",
       "      <th>TIME</th>\n",
       "      <th>OPEN</th>\n",
       "      <th>HIGH</th>\n",
       "      <th>LOW</th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>VOL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210802</td>\n",
       "      <td>0</td>\n",
       "      <td>287.88</td>\n",
       "      <td>289.48</td>\n",
       "      <td>285.21</td>\n",
       "      <td>286.75</td>\n",
       "      <td>38297270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210803</td>\n",
       "      <td>0</td>\n",
       "      <td>286.77</td>\n",
       "      <td>288.05</td>\n",
       "      <td>284.34</td>\n",
       "      <td>287.09</td>\n",
       "      <td>27065240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210804</td>\n",
       "      <td>0</td>\n",
       "      <td>287.89</td>\n",
       "      <td>288.80</td>\n",
       "      <td>286.00</td>\n",
       "      <td>287.94</td>\n",
       "      <td>23599750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210805</td>\n",
       "      <td>0</td>\n",
       "      <td>287.31</td>\n",
       "      <td>288.28</td>\n",
       "      <td>285.16</td>\n",
       "      <td>285.95</td>\n",
       "      <td>47254880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>20210806</td>\n",
       "      <td>0</td>\n",
       "      <td>285.26</td>\n",
       "      <td>285.72</td>\n",
       "      <td>277.87</td>\n",
       "      <td>282.27</td>\n",
       "      <td>90600850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  TICKER PER      DATE  TIME    OPEN    HIGH     LOW   CLOSE       VOL\n",
       "0   GAZP   D  20210802     0  287.88  289.48  285.21  286.75  38297270\n",
       "1   GAZP   D  20210803     0  286.77  288.05  284.34  287.09  27065240\n",
       "2   GAZP   D  20210804     0  287.89  288.80  286.00  287.94  23599750\n",
       "3   GAZP   D  20210805     0  287.31  288.28  285.16  285.95  47254880\n",
       "4   GAZP   D  20210806     0  285.26  285.72  277.87  282.27  90600850"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gazp.columns = ['TICKER', 'PER', 'DATE', 'TIME', 'OPEN', 'HIGH', 'LOW', 'CLOSE', 'VOL']\n",
    "\n",
    "gazp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Переведем даты из поля DATE в формат datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TICKER</th>\n",
       "      <th>PER</th>\n",
       "      <th>DATE</th>\n",
       "      <th>TIME</th>\n",
       "      <th>OPEN</th>\n",
       "      <th>HIGH</th>\n",
       "      <th>LOW</th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>VOL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>2021-08-02</td>\n",
       "      <td>0</td>\n",
       "      <td>287.88</td>\n",
       "      <td>289.48</td>\n",
       "      <td>285.21</td>\n",
       "      <td>286.75</td>\n",
       "      <td>38297270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>2021-08-03</td>\n",
       "      <td>0</td>\n",
       "      <td>286.77</td>\n",
       "      <td>288.05</td>\n",
       "      <td>284.34</td>\n",
       "      <td>287.09</td>\n",
       "      <td>27065240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GAZP</td>\n",
       "      <td>D</td>\n",
       "      <td>2021-08-04</td>\n",
       "      <td>0</td>\n",
       "      <td>287.89</td>\n",
       "      <td>288.80</td>\n",
       "      <td>286.00</td>\n",
       "      <td>287.94</td>\n",
       "      <td>23599750</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  TICKER PER       DATE  TIME    OPEN    HIGH     LOW   CLOSE       VOL\n",
       "0   GAZP   D 2021-08-02     0  287.88  289.48  285.21  286.75  38297270\n",
       "1   GAZP   D 2021-08-03     0  286.77  288.05  284.34  287.09  27065240\n",
       "2   GAZP   D 2021-08-04     0  287.89  288.80  286.00  287.94  23599750"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gazp['DATE'] = pd.to_datetime(gazp['DATE'], format='%Y%m%d')\n",
    "\n",
    "# дополнительно осортируем датасет по возрастанию дат (на всякий случай :)\n",
    "gazp.sort_values(by=['DATE'], inplace=True)\n",
    "\n",
    "gazp.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на изменение курса акций в динамике"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gazp['CLOSE'].plot(figsize=(10, 5));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видим резкое падение в последние несколько дней, незначительную стабилизацию, а затем снова медленное снижение курса."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сохраним в отдельную таблицу даты и курсы акций, определим даты в индексы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLOSE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-08-02</th>\n",
       "      <td>286.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-03</th>\n",
       "      <td>287.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-04</th>\n",
       "      <td>287.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-05</th>\n",
       "      <td>285.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-06</th>\n",
       "      <td>282.27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CLOSE\n",
       "DATE              \n",
       "2021-08-02  286.75\n",
       "2021-08-03  287.09\n",
       "2021-08-04  287.94\n",
       "2021-08-05  285.95\n",
       "2021-08-06  282.27"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = gazp[['DATE', 'CLOSE']]\n",
    "\n",
    "df.set_index('DATE', inplace=True)\n",
    "df.sort_index(inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создадим функцию, которая будет определять средний курс акций за несколько прошедших дней"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "# функция по созданию сгенерированных признаков\n",
    "def make_features(data, max_lag, rolling_mean_size):    \n",
    "    for lag in range(1, max_lag + 1):\n",
    "        data['lag_{}'.format(lag)] = data['CLOSE'].shift(lag)\n",
    "\n",
    "    data['y_mean'] = data['CLOSE'].shift().rolling(rolling_mean_size).mean().copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Применим функцию для определения средней цены акции за последние 3 дня"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>lag_1</th>\n",
       "      <th>lag_2</th>\n",
       "      <th>lag_3</th>\n",
       "      <th>y_mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-08-02</th>\n",
       "      <td>286.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-03</th>\n",
       "      <td>287.09</td>\n",
       "      <td>286.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-04</th>\n",
       "      <td>287.94</td>\n",
       "      <td>287.09</td>\n",
       "      <td>286.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-05</th>\n",
       "      <td>285.95</td>\n",
       "      <td>287.94</td>\n",
       "      <td>287.09</td>\n",
       "      <td>286.75</td>\n",
       "      <td>287.260000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-06</th>\n",
       "      <td>282.27</td>\n",
       "      <td>285.95</td>\n",
       "      <td>287.94</td>\n",
       "      <td>287.09</td>\n",
       "      <td>286.993333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CLOSE   lag_1   lag_2   lag_3      y_mean\n",
       "DATE                                                  \n",
       "2021-08-02  286.75     NaN     NaN     NaN         NaN\n",
       "2021-08-03  287.09  286.75     NaN     NaN         NaN\n",
       "2021-08-04  287.94  287.09  286.75     NaN         NaN\n",
       "2021-08-05  285.95  287.94  287.09  286.75  287.260000\n",
       "2021-08-06  282.27  285.95  287.94  287.09  286.993333"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "make_features(df, 3, 3)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Удалим пропуски"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>lag_1</th>\n",
       "      <th>lag_2</th>\n",
       "      <th>lag_3</th>\n",
       "      <th>y_mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-08-05</th>\n",
       "      <td>285.95</td>\n",
       "      <td>287.94</td>\n",
       "      <td>287.09</td>\n",
       "      <td>286.75</td>\n",
       "      <td>287.260000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-06</th>\n",
       "      <td>282.27</td>\n",
       "      <td>285.95</td>\n",
       "      <td>287.94</td>\n",
       "      <td>287.09</td>\n",
       "      <td>286.993333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-09</th>\n",
       "      <td>286.68</td>\n",
       "      <td>282.27</td>\n",
       "      <td>285.95</td>\n",
       "      <td>287.94</td>\n",
       "      <td>285.386667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-10</th>\n",
       "      <td>288.61</td>\n",
       "      <td>286.68</td>\n",
       "      <td>282.27</td>\n",
       "      <td>285.95</td>\n",
       "      <td>284.966667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-11</th>\n",
       "      <td>290.35</td>\n",
       "      <td>288.61</td>\n",
       "      <td>286.68</td>\n",
       "      <td>282.27</td>\n",
       "      <td>285.853333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CLOSE   lag_1   lag_2   lag_3      y_mean\n",
       "DATE                                                  \n",
       "2021-08-05  285.95  287.94  287.09  286.75  287.260000\n",
       "2021-08-06  282.27  285.95  287.94  287.09  286.993333\n",
       "2021-08-09  286.68  282.27  285.95  287.94  285.386667\n",
       "2021-08-10  288.61  286.68  282.27  285.95  284.966667\n",
       "2021-08-11  290.35  288.61  286.68  282.27  285.853333"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(inplace=True)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Разделим наши данные на признаки (X) и целевую переменную (y):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(['CLOSE'],axis = 1)\n",
    "y = df['CLOSE']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Разделяем модель на обучающую и валидационную выборку в процентном соотношении 70 к 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train (164, 4)\n",
      "X_test (71, 4)\n"
     ]
    }
   ],
   "source": [
    "X_train,X_test,y_train, y_test = train_test_split(X, \n",
    "                                                  y, \n",
    "                                                  test_size=0.3,\n",
    "                                                  shuffle=False, \n",
    "                                                  random_state=0)\n",
    "print('X_train', X_train.shape)\n",
    "print('X_test', X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Обучаем модель линейной регрессии**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lr = LinearRegression()\n",
    "model_lr.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([212.60333889, 208.97884737, 207.34834915, 221.65482325,\n",
       "       234.78850638, 237.80604015, 240.00179461, 236.03760863,\n",
       "       237.76470376, 239.70029696, 241.31623346, 232.91634835,\n",
       "       234.65535094, 242.1590675 , 255.5310097 , 263.63961803,\n",
       "       266.08849779, 263.30241131, 262.33620766, 264.73854943,\n",
       "       270.31921683, 290.50168275, 294.61517586, 299.4182512 ,\n",
       "       295.46406094, 297.35546491, 296.5127378 , 297.15588697,\n",
       "       296.77246105, 298.05907819, 306.04727667, 307.35790631,\n",
       "       308.9182635 , 315.94312544, 316.18934829, 316.41984119,\n",
       "       315.85884643, 313.20221112, 304.42794042, 297.87108793,\n",
       "       302.09595352, 298.86917718, 296.4943526 , 296.55885205,\n",
       "       297.3956188 , 227.73240376, 196.01445984, 189.44762986,\n",
       "       196.41319692, 197.61606669, 198.95618488, 199.6457671 ,\n",
       "       192.99316714, 192.55235708, 189.06016958, 186.81405266,\n",
       "       189.19667547, 188.92446779, 190.94433901, 194.60608525,\n",
       "       192.64487232, 193.93966609, 194.15948036, 195.37695817,\n",
       "       197.76452538, 198.37345348, 197.04857992, 194.24162051,\n",
       "       189.98094188, 188.88477067, 187.3724991 ])"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predicted_lr = model_lr.predict(X_test)\n",
    "y_predicted_lr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Соберём данные в таблицу, чтобы зрительно сравнить предсказанный возраст с реальным"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lag_1</th>\n",
       "      <th>lag_2</th>\n",
       "      <th>lag_3</th>\n",
       "      <th>y_mean</th>\n",
       "      <th>real_close</th>\n",
       "      <th>predict_close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-08-01</th>\n",
       "      <td>195.26</td>\n",
       "      <td>196.25</td>\n",
       "      <td>196.49</td>\n",
       "      <td>196.000000</td>\n",
       "      <td>192.00</td>\n",
       "      <td>197.048580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-02</th>\n",
       "      <td>192.00</td>\n",
       "      <td>195.26</td>\n",
       "      <td>196.25</td>\n",
       "      <td>194.503333</td>\n",
       "      <td>187.16</td>\n",
       "      <td>194.241621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-03</th>\n",
       "      <td>187.16</td>\n",
       "      <td>192.00</td>\n",
       "      <td>195.26</td>\n",
       "      <td>191.473333</td>\n",
       "      <td>187.04</td>\n",
       "      <td>189.980942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-04</th>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>192.00</td>\n",
       "      <td>188.733333</td>\n",
       "      <td>184.90</td>\n",
       "      <td>188.884771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-05</th>\n",
       "      <td>184.90</td>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>186.366667</td>\n",
       "      <td>176.58</td>\n",
       "      <td>187.372499</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             lag_1   lag_2   lag_3      y_mean  real_close  predict_close\n",
       "DATE                                                                     \n",
       "2022-08-01  195.26  196.25  196.49  196.000000      192.00     197.048580\n",
       "2022-08-02  192.00  195.26  196.25  194.503333      187.16     194.241621\n",
       "2022-08-03  187.16  192.00  195.26  191.473333      187.04     189.980942\n",
       "2022-08-04  187.04  187.16  192.00  188.733333      184.90     188.884771\n",
       "2022-08-05  184.90  187.04  187.16  186.366667      176.58     187.372499"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_copy = X_test.copy()\n",
    "\n",
    "gazp_with_predict = X_test_copy\n",
    "gazp_with_predict['real_close'] = y_test\n",
    "gazp_with_predict['predict_close'] = y_predicted_lr\n",
    "\n",
    "\n",
    "gazp_with_predict.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на графике, как отличаются предсказанные курсы акций от реальных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20, 9))\n",
    "plt.plot(y_predicted_lr, \"r\", linewidth=5, label=\"LinearRegression\")\n",
    "plt.plot(y_test.values, 'b', label=\"actual\", linewidth=5, alpha = 0.5)\n",
    "plt.legend(loc=\"best\")\n",
    "plt.title(\"Оценка моделей\")\n",
    "plt.grid(True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Посчитаем ошибки модели**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE тестовой выборки LinearRegression:  13.313967731033712\n",
      "MAE тестовой выборки Linear Regression:  6.3937545295946565\n"
     ]
    }
   ],
   "source": [
    "print('RMSE тестовой выборки LinearRegression: ', np.sqrt(mean_squared_error(y_test, y_predicted_lr)))\n",
    "print('MAE тестовой выборки Linear Regression: ', mean_absolute_error(y_test, y_predicted_lr))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод:** \n",
    "\n",
    "В среднем модель ошибается на 13 пунктов, в последние несколько дней завышая цену акций."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Добавим в данные 6 августа и предскажем курс акции в этот день**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Генерируем строку с датой 6 августа и пустым значением курса акции"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>lag_1</th>\n",
       "      <th>lag_2</th>\n",
       "      <th>lag_3</th>\n",
       "      <th>y_mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-08-06</th>\n",
       "      <td>0</td>\n",
       "      <td>184.9</td>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>186.366667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            CLOSE  lag_1   lag_2   lag_3      y_mean\n",
       "DATE                                                \n",
       "2022-08-06      0  184.9  187.04  187.16  186.366667"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfap = df.tail(1).copy()\n",
    "dfap['CLOSE'] = 0\n",
    "dfap = dfap.reset_index()\n",
    "\n",
    "dfap['DATE'] = dfap['DATE'] + datetime.timedelta(days=1)\n",
    "dfap.set_index('DATE', drop=True, inplace=True)\n",
    "\n",
    "dfap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавляем дату 6 августа в датасет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>lag_1</th>\n",
       "      <th>lag_2</th>\n",
       "      <th>lag_3</th>\n",
       "      <th>y_mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-08-02</th>\n",
       "      <td>187.16</td>\n",
       "      <td>192.00</td>\n",
       "      <td>195.26</td>\n",
       "      <td>196.25</td>\n",
       "      <td>194.503333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-03</th>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>192.00</td>\n",
       "      <td>195.26</td>\n",
       "      <td>191.473333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-04</th>\n",
       "      <td>184.90</td>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>192.00</td>\n",
       "      <td>188.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-05</th>\n",
       "      <td>176.58</td>\n",
       "      <td>184.90</td>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>186.366667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-06</th>\n",
       "      <td>0.00</td>\n",
       "      <td>184.90</td>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>186.366667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CLOSE   lag_1   lag_2   lag_3      y_mean\n",
       "DATE                                                  \n",
       "2022-08-02  187.16  192.00  195.26  196.25  194.503333\n",
       "2022-08-03  187.04  187.16  192.00  195.26  191.473333\n",
       "2022-08-04  184.90  187.04  187.16  192.00  188.733333\n",
       "2022-08-05  176.58  184.90  187.04  187.16  186.366667\n",
       "2022-08-06    0.00  184.90  187.04  187.16  186.366667"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new = df.append(dfap)\n",
    "df_new.tail(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Генерируем фичи для 6 августа"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>lag_1</th>\n",
       "      <th>lag_2</th>\n",
       "      <th>lag_3</th>\n",
       "      <th>y_mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-08-02</th>\n",
       "      <td>187.16</td>\n",
       "      <td>192.00</td>\n",
       "      <td>195.26</td>\n",
       "      <td>196.25</td>\n",
       "      <td>194.503333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-03</th>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>192.00</td>\n",
       "      <td>195.26</td>\n",
       "      <td>191.473333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-04</th>\n",
       "      <td>184.90</td>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>192.00</td>\n",
       "      <td>188.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-05</th>\n",
       "      <td>176.58</td>\n",
       "      <td>184.90</td>\n",
       "      <td>187.04</td>\n",
       "      <td>187.16</td>\n",
       "      <td>186.366667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-08-06</th>\n",
       "      <td>0.00</td>\n",
       "      <td>176.58</td>\n",
       "      <td>184.90</td>\n",
       "      <td>187.04</td>\n",
       "      <td>182.840000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CLOSE   lag_1   lag_2   lag_3      y_mean\n",
       "DATE                                                  \n",
       "2022-08-02  187.16  192.00  195.26  196.25  194.503333\n",
       "2022-08-03  187.04  187.16  192.00  195.26  191.473333\n",
       "2022-08-04  184.90  187.04  187.16  192.00  188.733333\n",
       "2022-08-05  176.58  184.90  187.04  187.16  186.366667\n",
       "2022-08-06    0.00  176.58  184.90  187.04  182.840000"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "make_features(df_new, 3, 3)\n",
    "\n",
    "df_new.dropna(inplace=True)\n",
    "\n",
    "df_new.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Передаём данные для 6 августа линейной регрессии"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lag_1</th>\n",
       "      <th>lag_2</th>\n",
       "      <th>lag_3</th>\n",
       "      <th>y_mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-08-06</th>\n",
       "      <td>176.58</td>\n",
       "      <td>184.9</td>\n",
       "      <td>187.04</td>\n",
       "      <td>182.84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             lag_1  lag_2   lag_3  y_mean\n",
       "DATE                                     \n",
       "2022-08-06  176.58  184.9  187.04  182.84"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test = df_new.drop(['CLOSE'],axis = 1)\n",
    "X_test.tail(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([181.98707317])"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_lr.predict(X_test.tail(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Итог:**\n",
    "\n",
    "Модель предсказала на 6 августа курс акции 181.98."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
